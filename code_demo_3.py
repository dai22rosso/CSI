# -*- coding: utf-8 -*-
import pandas as pd
import matplotlib.pyplot as plt
from matplotlib.pyplot import MultipleLocator
import math
from scipy import signal
import matplotlib.pyplot as plt
import numpy as np
def get_ave(list_org, ave_num):
    ff_ave = []
    for i in range(ave_num, len(list_org) - ave_num):
        ff_ave.append((list_org[i - ave_num] + list_org[i] + list_org[ave_num + i]) / 3)
    return ff_ave
def get_linspace(x,y):
    r_x=np.linspace(0,30,len(y))
def integrate(list1):
    wanted = []
    wanted.append(0)
    for i in range(len(list1) - 1):
        wanted.append(wanted[i] + list1[i])
    return wanted
def get_bool(list1):
    list_bool = []
    for i in range(len(list1)):
        if (list1[i] == 0):
            list_bool.append(1)
        else:
            list_bool.append(0)
    return list_bool
def mix_wave_peak(a,b):
    x=[]
    if (len(a) == len(b)):
        if (a[0] == min(a[0], b[0])):
            for i in range(len(b)):
                x.append(a[i])
                x.append(b[i])
            x.append(a[len(a) - 1])
        else:

            for i in range(len(a)):
                x.append(b[i])
                x.append(a[i])
            x.append(b[len(b) - 1])
        return x
    elif (len(a) > len(b)):
        for i in range(len(b)):
            x.append(a[i])
            x.append(b[i])
        x.append(a[len(a) - 1])
        return x
    else:
        for i in range(len(a)):
            x.append(b[i])
            x.append(a[i])
        x.append(b[len(b) - 1])
        return x
def test_dense(a, b, c, num):
    x = []
    x=mix_wave_peak(a,b)
    diff = []
    n = len(x)
    for i in range(n):
        x.append(15000 + 10000 * i)
    kk = 0
    while (kk < n):
        if (x[kk + 1] - x[kk] <= len(c) / num):
            x.pop(kk)
            x.pop(kk)
        else:
            kk += 1
    for i in range(n):
        x.pop()
    return x
def no_zero(list1):
    list_bool=get_bool(list1)

    sum=0
    for ii in range(len(list1)):
        sum+=list_bool[ii]
        if(sum!=0):
            a=ii

            iii=1
            isum=1
            while(iii!=0):
                if(a>len(list_bool)-1):
                    break
                iii*=list_bool[a]
                a+=1
                isum+=1
            list1.append(list1[len(list1)-1])
            for kk in range(isum-1):
                list1[ii+kk]=list1[ii-1]*(isum-1-kk)/isum+list1[ii+isum-1]*(1+kk)/isum
            sum=0
            ii+=isum+1
            list1.pop()
        else:
            continue
    return list1
def get_count(a, c):
    count = (len(a) - 1) / 2 + (len(c) + a[0] - a[len(a) - 1]) / ((a[len(a) - 1] - a[0]) / (len(a) - 1) * 2)
    return count
# def wave_num(l,num):
#     for i in range(len(l)-1):
#         if(l[i]*l[i+1]<0):
#             if()
import numpy as np
import matplotlib.pyplot as plt
from scipy import optimize
# f=[-121.79773934214177, -123.29773934214177, -121.79773934214177, -123.29773934214177, -124.16901795397978, -123.964669696855, -122.464669696855, -122.73058447381166, -124.23058447381166, -124.28249004975217, -123.8392628063485, -122.3392628063485, -123.8392628063485, -122.3392628063485, -122.02399134330477, -120.78001950365658, -122.28001950365658, -123.78001950365658, -124.10278181044514, -122.60278181044514, -122.7846323835517, -124.2846323835517, -122.7846323835517, -121.76802284011157, -123.26802284011157, -121.76802284011157, -121.8989289329335, -123.3989289329335, -121.8989289329335, -123.3989289329335, -123.12012645454077, -123.06496911928117, -123.51304429901887, -122.01304429901887, -123.51304429901887, -122.90120972521973, -122.2537906351841, -122.00163363372185, -123.49580818976234, -122.84602004152585, -121.63648266771197, -122.90381620712272, -123.89739063600378, -123.16909640552844, -123.90687402934812, -122.85352442768387, -121.62885636996434, -123.12885636996434, -123.10956115129913, -122.43920802389702, -121.70404567158184, -123.20404567158184, -124.57266849299647, -123.52034885390658, -125.02034885390658, -123.52034885390658, -125.02034885390658, -125.60601643036803, -125.75662714282961, -124.25662714282961, -123.36477912955253, -124.86477912955253, -123.36477912955253, -124.86477912955253, -125.52533767636477, -124.85700308402416, -125.10671487365623, -126.04225671810069, -125.16006749740731, -125.1548982173659, -124.1869286534499, -125.6869286534499, -127.1869286534499, -126.51565594039864, -125.01565594039864, -126.51565594039864, -126.45480230775514, -127.95480230775514, -126.45480230775514, -127.11216255113727, -128.61216255113726, -129.75315976383973, -129.7929362671236, -128.46829544141858, -128.69017914451828, -130.19017914451828, -129.71147855365197, -128.2828609994695, -129.72773728650694, -129.52559313254253, -128.3659422572487, -126.86594225724869, -128.3659422572487, -129.55610224034706, -128.05610224034706, -128.40156439490517, -129.90156439490517, -128.9417234211109, -127.84597262775426, -129.34597262775426, -129.65371109815774, -129.65371109815774, -129.65371109815774, -129.65371109815774, -129.65371109815774, -129.65371109815774, -129.65371109815774, -129.65371109815774, -129.65371109815774, -129.65371109815774, -129.65371109815774, -129.65371109815774, -129.65371109815774, -129.65371109815774, -129.65371109815774, -129.65371109815774, -129.65371109815774, -129.65371109815774, -129.65371109815774, -129.65371109815774, -129.65371109815774, -129.65371109815774, -129.65371109815774, -129.65371109815774, -129.65371109815774, -129.65371109815774, -129.65371109815774, -129.65371109815774, -129.65371109815774, -129.65371109815774, -128.15371109815774, -126.65371109815774, -125.15371109815774, -123.65371109815774, -125.15371109815774, -123.65371109815774, -122.15371109815774, -123.65371109815774, -122.15371109815774, -120.65371109815774, -120.46379109949639, -120.46379109949639, -120.46379109949639, -120.46379109949639, -120.46379109949639, -120.46379109949639, -120.46379109949639, -120.46379109949639, -120.46379109949639, -120.46379109949639, -121.96379109949639, -120.46379109949639, -121.96379109949639, -123.46379109949639, -124.67523383490563, -123.17523383490563, -121.67523383490563, -120.96569763804733, -119.72447185213163, -119.12338474245546, -117.62338474245546, -116.37028786659788, -116.3866628142123, -114.8866628142123, -115.12106509936073, -113.62106509936073, -115.12106509936073, -113.62106509936073, -115.12106509936073, -113.62106509936073, -113.04950521239341, -112.8607639443166, -112.97863696061519, -112.77560446447536, -114.10812038120052, -112.60812038120052, -113.3784762387869, -114.49707868002982, -114.69928028620966, -113.19928028620966, -113.36243746175654, -111.86243746175654, -113.36243746175654, -113.72185320594672, -112.22185320594672, -112.10486542099531, -113.60486542099531, -112.10486542099531, -113.60486542099531, -112.10486542099531, -112.32386281387845, -110.82386281387845, -112.32386281387845, -111.89325662648379, -112.2057381680297, -110.76756107619379, -109.92674720835143, -109.10004402675155, -110.60004402675155, -109.10004402675155, -108.5004333328463, -108.06342611290152, -109.56342611290152, -110.76958570961278, -110.049083463397, -110.20362895638101, -109.33238347021667, -110.33652701787189, -110.14865941511134, -108.64865941511134, -110.14865941511134, -110.49781068213149, -111.43689416508262, -109.93689416508262, -108.43689416508262, -108.30037473540109, -109.80037473540109, -108.35664210130506, -109.85664210130506, -110.92090940628343, -109.42090940628343, -108.35791386530575, -107.70037792701883, -109.20037792701883, -107.95815324388757, -108.34710733397675, -107.79387333660472, -109.29387333660472, -108.9201974038503, -107.63722608312712, -108.1263468441665, -107.81216530447296, -107.9765137243785, -109.4765137243785, -107.9765137243785, -109.4765137243785, -110.69421312060273, -109.19421312060273, -109.59927046547766, -110.24077899330662, -108.74077899330662, -107.61864442910864, -108.67361597881488, -109.50080580559306, -108.00080580559306, -108.46436909613571, -109.79324059348501, -108.29324059348501, -109.79324059348501, -111.29324059348501, -110.22403635457978, -108.72403635457978, -107.74992945540336, -109.24992945540336, -110.74992945540336, -111.25814955273333, -109.75814955273333, -108.32913003150793, -107.44241458346605, -108.7360630725162, -110.2360630725162, -111.31480969560957, -110.39394215299114, -108.89394215299114, -110.39394215299114, -110.52896204792805, -109.2574438048055, -110.7574438048055, -109.2574438048055, -110.7574438048055, -109.7195913666014, -111.2195913666014, -111.94619344385629, -111.40284166205203, -112.90284166205203, -111.40284166205203, -112.90284166205203, -114.40284166205203, -113.85828030193159, -113.9717409678, -113.71284873177609, -112.68241215656991, -114.18241215656991, -114.50139924630776, -116.00139924630776, -114.50139924630776, -116.00139924630776, -116.05677461724628, -117.55677461724628, -116.05677461724628, -116.7785047354389, -118.2785047354389, -116.7785047354389, -118.2785047354389, -119.7785047354389, -118.2785047354389, -119.7785047354389, -119.52846256613941, -120.63758797891492, -122.13758797891492, -123.63758797891492, -122.13758797891492, -123.63758797891492, -125.13758797891492, -123.63758797891492, -125.13758797891492, -123.70384677741549, -124.56049501207605, -125.03615069295157, -125.74383262622914, -124.24383262622914, -122.74383262622914, -123.83488408630373, -122.87766466551872, -122.79515808902158, -122.95101868723765, -122.4842052780323, -120.9842052780323, -122.4842052780323, -123.9842052780323, -122.4842052780323, -122.76085959423247, -122.11002004370198, -120.61002004370198, -122.11002004370198, -120.61002004370198, -119.11002004370198, -117.61002004370198, -119.11002004370198, -117.61002004370198, -116.11002004370198, -114.9550764939182, -115.27223050436547, -114.57820604758015, -113.07820604758015, -113.31752978736404, -114.68049481562036, -114.31959193767582, -112.81959193767582, -111.41537033043625, -110.0082346388032, -109.66029371120828, -108.76578132794613, -110.26578132794613, -111.29954968221206, -110.67094500994575, -109.86983536375014, -108.85331331976717, -108.42490813443857, -109.87408122535346, -110.17184786206344, -108.67184786206344, -110.17184786206344, -109.14431932779145, -109.22735024297914, -109.0455365125588, -108.6447750060956, -109.15198816832243, -107.65198816832243, -106.15198816832243, -107.65198816832243, -106.3079316066005, -107.8079316066005, -107.99946661620837, -106.86226288517533, -105.52254726172613, -105.86532511456703, -106.13736680509834, -107.63736680509834, -106.13736680509834, -104.63736680509834, -106.13736680509834, -106.34806743480284, -105.92192617753433, -105.55722598055108, -104.37484059388187, -105.28096054708652, -105.18433754594822, -104.22441517855061, -103.28969027898897, -104.78969027898897, -103.28969027898897, -102.96009746539153, -104.46009746539153, -105.27739554008676, -104.26603542790723, -105.76603542790723, -105.3886216087823, -105.74463342181899, -105.42208786254135, -103.92208786254135, -105.42208786254135, -103.92208786254135, -104.15292906520506, -105.1180430448518, -106.60356615382777, -105.10356615382777, -103.60356615382777, -105.10356615382777, -103.60356615382777, -102.94666144123194, -102.94666144123194, -102.94666144123194, -102.94666144123194, -102.94666144123194, -102.94666144123194, -102.94666144123194, -102.94666144123194, -102.94666144123194, -102.94666144123194, -101.44666144123194, -99.94666144123194, -98.44666144123194, -97.78695435394485, -99.28695435394485, -97.78695435394485, -98.12182400440182, -99.46873041373162, -100.96873041373162, -99.46873041373162, -98.22408519356779, -96.975460742286, -98.475460742286, -96.975460742286, -98.475460742286, -99.3760764889773, -97.8760764889773, -97.4559304496664, -97.29148408166705, -98.23690294319896, -98.04726009773128, -98.97251525166055, -99.14738088621267, -99.41634494714977, -100.38463024746689, -98.88463024746689, -98.09215493853748, -99.59215493853748, -98.09215493853748, -99.59215493853748, -98.09215493853748, -99.59215493853748, -98.09215493853748, -99.59215493853748, -101.09215493853748, -99.59215493853748, -101.09215493853748, -100.73389416047586, -101.00039162045806, -101.59432324452126, -101.15810361770883, -99.65810361770883, -101.15810361770883, -102.35253044025328, -102.04360771080131, -100.78947607264448, -102.28947607264448, -103.31278324296835, -102.33601607360927, -103.7457395952473, -102.2457395952473, -102.98030448741795, -102.32797778485643, -102.49875850780442, -103.99875850780442, -105.49875850780442, -105.16783140898764, -106.66783140898764, -108.16783140898764, -108.45909546399663, -108.73176275008413, -109.02944302888176, -109.53585561555913, -108.20064216526048, -109.70064216526048, -108.20064216526048, -108.14531131253503, -108.74503202421621, -107.81573215330883, -107.41031587012677, -108.65846128319353, -108.57339734134693, -107.66035424047497, -106.16035424047497, -104.66035424047497, -106.16035424047497, -106.52828751206579, -106.4692569793045, -105.37372349129805, -106.30387584257946, -104.85670606486002, -106.31727914074051, -105.74126443683863, -105.46004204649861, -106.42846203936477, -104.92846203936477, -106.42846203936477, -105.1091147445942, -103.77726071473512, -102.27726071473512, -103.77726071473512, -104.60398566769574, -103.10398566769574, -101.60398566769574, -102.88473202358665, -101.48219121767494, -102.97543025210175, -101.47543025210175, -102.97543025210175, -101.47543025210175, -102.97543025210175, -102.58742158896985, -101.08742158896985, -102.58742158896985, -101.2792628002851, -99.7792628002851, -101.2792628002851, -101.08913867321439, -102.02310644893511, -100.52310644893511, -102.02310644893511, -101.21633236034509, -99.71633236034509, -101.21633236034509, -100.12117994543618, -98.62117994543618, -100.12117994543618, -99.32033930162666, -100.82033930162666, -99.32033930162666, -97.82033930162666, -99.32033930162666, -97.82033930162666, -96.42593828093231, -97.92593828093231, -96.42593828093231, -97.92593828093231, -96.72925583534686, -97.0547312123906, -98.5547312123906, -98.99531549250406, -99.07209835574719, -97.57209835574719, -99.07209835574719, -97.57209835574719, -97.5073440044815, -98.15602011866244, -96.83338502490165, -95.68795799955029, -97.18795799955029, -95.68795799955029, -97.18795799955029, -95.68795799955029, -96.93195225540896, -96.48981176779077, -97.98981176779077, -96.48981176779077, -95.50971957205343, -97.00971957205343, -98.50971957205343, -98.89486402203694, -98.88849018810788, -97.38849018810788, -95.88849018810788, -96.31933044825412, -97.81933044825412, -99.31933044825412, -97.81933044825412, -99.10528445055778, -97.60528445055778, -97.245024896698, -96.47161837647539, -97.97161837647539, -98.02433934318651, -98.8549722585648, -97.3549722585648, -95.8549722585648, -97.3549722585648, -95.8549722585648, -97.3549722585648, -95.8549722585648, -95.01171482735255, -96.51171482735255, -98.01171482735255, -96.51171482735255, -96.06382223816696, -97.56382223816696, -98.66800879121405, -98.35874744312068, -97.49875575652284, -98.99875575652284, -97.49875575652284, -98.99875575652284, -99.87079145603656, -101.03213111951008, -99.53213111951008, -100.57061451358393, -101.92753380868513, -100.42753380868513, -98.92753380868513, -99.87850426607821, -99.2884532708887, -98.19122303739661, -99.27090087666106, -100.77090087666106, -101.25817243653064, -101.55241622713274, -100.82224999563748, -100.35081252493882, -101.85081252493882, -101.15517862476914, -100.77995151734686, -102.27995151734686, -102.92074536947162, -103.6332187586764, -104.45351717932837, -103.17609241374646, -103.5904451923765, -104.89824099424519, -105.1850996723617, -106.6850996723617, -105.1850996723617, -105.71176300959878, -107.21176300959878, -108.71176300959878, -107.21176300959878, -108.71176300959878, -110.21176300959878, -108.84545338005779, -107.56865538631476, -109.06865538631476, -110.56865538631476, -110.77991027298881, -109.38013011325388, -108.32463200370512, -109.73311920410222, -109.52696420310878, -109.56761475971226, -108.06761475971226, -108.53945440907309, -108.41141964281461, -108.9639714229902, -108.25231931798513, -108.27420516389492, -108.00759284818079, -109.50759284818079, -108.00759284818079, -107.07359589754422, -108.0561210774236, -109.44254408766619, -108.16907638543374, -106.74016308769433, -105.97328133210335, -105.61425356328522, -107.11425356328522, -105.61425356328522, -106.29213068289187, -106.57024084627841, -105.94166411542606, -106.54474779816327, -105.04474779816327, -103.54474779816327, -102.72249663940065, -104.22249663940065, -102.72249663940065, -104.22249663940065, -104.90357272102493, -103.87204692548923, -104.25885140466802, -104.82223210546759, -103.32223210546759, -101.82223210546759, -100.70943352892637, -102.20943352892637, -100.70943352892637, -102.20943352892637, -100.70943352892637, -99.20943352892637, -100.3866318100826, -98.8866318100826, -98.51231793190597, -99.59918080338826, -101.00484637374574, -99.59135404576837, -98.4751756362108, -98.20447789883893, -99.70447789883893, -100.47483377647877, -100.50496715098043, -99.00496715098043, -99.75351861781928, -99.25418556626606, -98.21561932365522, -99.71561932365522, -100.25095346021565, -99.81963425080062, -99.45756301439704, -98.52233198823879, -98.5023373228606, -98.93820497749226, -97.43820497749226, -98.17113163380998, -97.51024423280194, -99.01024423280194, -97.51024423280194, -97.79635418215639, -99.29635418215639, -99.24672874022633, -99.70698290774291, -99.73699468636688, -99.73699468636688, -99.73699468636688, -99.73699468636688, -99.73699468636688, -99.73699468636688, -99.73699468636688, -99.73699468636688, -99.73699468636688, -99.73699468636688, -99.73699468636688, -101.23699468636688, -102.73699468636688, -102.64539926581219, -102.96202328261667, -101.49505524497349, -102.74485962819449, -101.80394037004984, -101.8008668683585, -103.3008668683585, -104.2603906206966, -103.78189973900513, -103.78898668230251, -104.65689046190516, -103.15689046190516, -104.65689046190516, -103.70873140443632, -104.03467507298717, -103.9950388250817, -102.4950388250817, -100.9950388250817, -102.2340961965663, -103.7340961965663, -104.94717643686565, -103.44717643686565, -101.95746058097279, -103.20041515577182, -101.70511136817368, -103.20511136817368, -104.02932765493755, -102.52932765493755, -104.02932765493755, -104.28365648784444, -102.94817380676719, -104.44817380676719, -103.75454354166114, -103.50184874387381, -102.29083971402184, -103.79083971402184, -102.29083971402184, -103.79083971402184, -105.04340705780923, -104.4398456333248, -102.9398456333248, -101.4398456333248, -102.9398456333248, -101.4398456333248, -102.9398456333248, -102.2793636207348, -102.31551187603647, -103.12056689100983, -102.5724070799562, -103.6692589753999, -102.1692589753999, -103.6692589753999, -103.50853331549236, -104.25534097840831, -104.15039248594776, -103.15717098487325, -103.45937749522508, -101.98420367820039, -101.35972259414993, -101.17806110346491, -101.4241362627594, -102.9241362627594, -101.4241362627594, -101.93711196125952, -103.43711196125952, -103.93610767095537, -103.91000557603847, -104.77478077685528, -103.7648803791085, -102.73993234244324, -104.23993234244324, -105.23588227982087, -104.13096603356877, -102.73192998500049, -101.46895054530559, -102.96895054530559, -104.46895054530559, -103.4558249910523, -103.68241542087209, -105.18241542087209, -105.59765105858459, -104.32437660972309, -102.83355003942032, -104.33355003942032, -105.033019106596, -105.54372355355989, -104.8352942891914, -106.3352942891914, -107.8352942891914, -106.3352942891914, -105.89442545738451, -107.39442545738451, -106.68461430190823, -108.18461430190821, -106.68461430190821, -106.90536393372798, -108.3923678850086, -106.8923678850086, -107.87244677439755, -106.53857505494221, -108.03857505494221, -108.5553135082655, -109.30359336107475, -110.10950132246865, -110.78838507761571, -111.28373721735792, -111.04290807597815, -109.54290807597815, -109.19348256405237, -108.8991486662502, -110.3991486662502, -110.66514719678136, -109.16514719678136, -110.66514719678136, -109.16514719678136, -110.66514719678136, -109.16514719678136, -107.66514719678136, -106.16514719678136, -106.16514719678136, -106.16514719678136, -106.16514719678136, -106.16514719678136, -106.16514719678136, -106.16514719678136, -106.16514719678136, -106.16514719678136, -106.16514719678136, -106.16514719678136, -106.16514719678136, -106.16514719678136, -106.16514719678136, -106.16514719678136, -106.16514719678136, -106.16514719678136, -106.16514719678136, -106.16514719678136, -106.16514719678136, -106.16514719678136, -106.16514719678136, -106.16514719678136, -106.16514719678136, -106.16514719678136, -106.16514719678136, -106.16514719678136, -106.16514719678136, -106.16514719678136, -106.16514719678136, -106.16514719678136, -106.16514719678136, -106.16514719678136, -106.16514719678136, -106.16514719678136, -106.16514719678136, -106.16514719678136, -106.16514719678136, -106.16514719678136, -106.16514719678136, -104.66514719678136, -106.16514719678136, -104.66514719678136, -103.16514719678136, -101.66514719678136, -102.42418302098045, -103.72573216229948, -104.93519894775548, -104.29924055643242, -104.32972441536393, -103.99943700787242, -103.82976017362797, -105.17648861170838, -103.92388288235148, -102.42388288235148, -100.92388288235148, -102.42388288235148, -101.4295543972603, -101.10738341453043, -102.60738341453043, -101.6026187810101, -102.43134997569798, -100.93134997569798, -99.66468499811396, -101.16468499811396, -102.246765849122, -100.746765849122, -102.246765849122, -103.02093625010707, -102.72399093489874, -101.22399093489874, -101.16474873625026, -102.33603309978069, -100.83603309978069, -100.41100086014637, -100.16301186689589, -99.01409223494923, -99.18715533736781, -100.68715533736781, -99.18715533736781, -99.12077915955187, -100.62077915955187, -100.57704030929796, -102.07704030929796, -100.57704030929796, -102.07704030929796, -100.57704030929796, -102.07704030929796, -100.57704030929796, -99.55893554345175, -99.8737920102264, -101.3737920102264, -102.28172501190039, -100.78172501190039, -99.28172501190039, -100.78172501190039, -101.03712091931826, -100.76283244690977, -100.22189155771385, -100.42537548957205, -100.42537548957205, -100.42537548957205, -100.42537548957205, -100.42537548957205, -100.42537548957205, -100.42537548957205, -100.42537548957205, -100.42537548957205, -100.42537548957205, -100.42537548957205, -100.42537548957205, -100.42537548957205, -100.42537548957205, -100.42537548957205, -100.42537548957205, -100.42537548957205, -100.42537548957205, -100.42537548957205, -100.42537548957205, -100.42537548957205, -100.42537548957205, -100.42537548957205, -100.42537548957205, -100.42537548957205, -100.42537548957205, -100.42537548957205, -100.42537548957205, -100.42537548957205, -100.42537548957205, -100.42537548957205, -100.42537548957205, -100.42537548957205, -100.42537548957205, -100.42537548957205, -100.42537548957205, -100.42537548957205, -100.42537548957205, -100.42537548957205, -100.42537548957205, -100.42537548957205, -100.42537548957205, -100.42537548957205, -100.42537548957205, -100.42537548957205, -100.42537548957205, -100.42537548957205, -100.42537548957205, -100.42537548957205, -100.42537548957205, -100.42537548957205, -100.42537548957205, -100.42537548957205, -100.42537548957205, -100.42537548957205, -100.42537548957205, -100.42537548957205, -100.42537548957205, -100.42537548957205, -100.42537548957205, -100.42537548957205, -100.42537548957205, -100.42537548957205, -100.42537548957205, -100.42537548957205, -100.42537548957205, -100.42537548957205, -100.42537548957205, -100.42537548957205, -100.42537548957205, -100.42537548957205, -98.92537548957205, -97.42537548957205, -98.92537548957205, -99.08624139647534, -100.58624139647534, -99.08624139647534, -100.58624139647534, -102.08624139647534, -101.99218828083582, -100.49218828083582, -101.99218828083582, -103.416286695602, -101.916286695602, -102.67946008676, -103.8687335044545, -104.45503402653307, -103.04806966861952, -103.8333570909744, -104.5920797445944, -104.72403152185555, -105.23309425249717, -105.7327748987552, -106.62339392280356, -107.21207344839783, -108.51715042699459, -107.01715042699459, -108.51715042699459, -110.01715042699459, -108.94016608080337, -107.44016608080337, -107.06367740035108, -108.27453429519306, -107.36299167825547, -106.1094914242336, -106.66207076517762, -106.92090046292468, -105.42090046292468, -106.65843650807851, -108.15843650807851, -106.65843650807851, -105.58883604856538, -107.08883604856538, -107.82970034469427, -107.17102597846235, -105.67102597846235, -104.60567613532541, -104.042802003022, -105.542802003022, -104.042802003022, -105.542802003022, -106.66918811793721, -105.8031265244215, -106.1000104420044, -104.6000104420044, -103.19506774306335, -102.15991447899447, -103.64531667359356, -102.57674511209675, -101.50702941735614, -103.00702941735614, -102.22222210164334, -100.72222210164334, -101.21738453184805, -100.96913320802892, -100.88468004296925, -101.01504244189088, -100.15787376555289, -100.72913270648961, -99.263718365791, -98.65560281308059, -98.45600846595278, -99.18683265698219, -98.10435481873061, -96.99149847053422, -97.1604391745571, -96.91239534673409, -97.84744885803016, -99.34744885803016, -97.84744885803016, -97.38839244350709, -97.38839244350709, -97.38839244350709, -97.38839244350709, -97.38839244350709, -97.38839244350709, -97.38839244350709, -97.38839244350709, -97.38839244350709, -97.38839244350709, -97.38839244350709, -97.38839244350709, -97.38839244350709, -97.38839244350709, -97.38839244350709, -97.38839244350709, -97.38839244350709, -97.38839244350709, -97.38839244350709, -97.38839244350709, -97.38839244350709, -97.38839244350709, -97.38839244350709, -97.38839244350709, -97.38839244350709, -97.38839244350709, -97.38839244350709, -97.38839244350709, -97.38839244350709, -97.38839244350709, -97.38839244350709, -97.38839244350709, -97.38839244350709, -97.38839244350709, -97.38839244350709, -97.38839244350709, -97.38839244350709, -97.38839244350709, -97.38839244350709, -97.38839244350709, -97.38839244350709, -97.38839244350709, -97.38839244350709, -97.38839244350709, -97.38839244350709, -97.38839244350709, -97.38839244350709, -97.38839244350709, -97.38839244350709, -97.38839244350709, -97.38839244350709, -97.38839244350709, -97.38839244350709, -97.38839244350709, -97.38839244350709, -97.38839244350709, -97.38839244350709, -97.38839244350709, -97.38839244350709, -97.38839244350709, -97.38839244350709, -98.88839244350709, -100.38839244350709, -100.4361202025495, -101.9361202025495, -102.63241126977286, -103.30629939455696, -104.80629939455696, -103.30629939455696, -103.35268265336572, -104.85268265336572, -103.35268265336572, -104.85268265336572, -103.64481585352584, -105.14481585352584, -105.73881518187503, -106.34920351310899, -106.03986615688788, -106.1756136661252, -105.0466128518114, -106.1457111610761, -105.7047448642346, -107.2047448642346, -105.7047448642346, -106.25330875644161, -107.75330875644161, -106.25330875644161, -107.07069982624031, -108.57069982624031, -107.07069982624031, -108.4644536319862, -107.49850561025356, -108.79604942299804, -109.33180640136248, -109.16700297470561, -109.59319509552489, -108.94183680830761, -107.44183680830761, -108.94183680830761, -110.44183680830761, -109.33562424496606, -108.44650021752275, -109.94650021752275, -108.44650021752275, -109.94650021752275, -108.44650021752275, -107.85700850364913, -108.25761093295253, -108.14037854172764, -109.51678622762248, -108.01678622762248, -106.93559593479551, -106.93559593479551, -106.93559593479551, -106.93559593479551, -106.93559593479551, -106.93559593479551, -106.93559593479551, -106.93559593479551, -106.93559593479551, -106.93559593479551, -105.43559593479551, -103.93559593479551, -104.62652948870938, -105.17220368752771, -104.71034791905865, -104.18211143135551, -102.68211143135551, -104.18211143135551, -105.12717949799269, -104.23847387979077, -104.23847387979077, -104.23847387979077, -104.23847387979077, -104.23847387979077, -104.23847387979077, -104.23847387979077, -104.23847387979077, -104.23847387979077, -104.23847387979077, -104.23847387979077, -104.23847387979077, -104.23847387979077, -104.23847387979077, -104.23847387979077, -104.23847387979077, -104.23847387979077, -104.23847387979077, -104.23847387979077, -104.23847387979077, -104.23847387979077, -104.23847387979077, -104.23847387979077, -104.23847387979077, -104.23847387979077, -104.23847387979077, -104.23847387979077, -104.23847387979077, -104.23847387979077, -104.23847387979077, -104.23847387979077, -104.23847387979077, -104.23847387979077, -104.23847387979077, -104.23847387979077, -104.23847387979077, -104.23847387979077, -104.23847387979077, -104.23847387979077, -104.23847387979077, -104.23847387979077, -104.23847387979077, -104.23847387979077, -104.23847387979077, -104.23847387979077, -104.23847387979077, -104.23847387979077, -104.23847387979077, -104.23847387979077, -104.23847387979077, -104.23847387979077, -104.23847387979077, -104.23847387979077, -104.23847387979077, -104.23847387979077, -104.23847387979077, -104.23847387979077, -104.23847387979077, -104.23847387979077, -104.23847387979077, -104.23847387979077, -103.28900095336066, -104.19645183693598, -102.69645183693598, -101.62178679281034, -103.12178679281034, -104.56320776342295, -104.61336184294058, -104.69139870141538, -103.19139870141538, -103.50661612711768, -105.00661612711768, -104.06003964685661, -105.56003964685661, -107.06003964685661, -105.56003964685661, -107.06003964685661, -105.56003964685661, -107.06003964685661, -106.69077341454218, -105.53697099249632, -107.03697099249632, -105.53697099249632, -107.03697099249632, -107.02902655956464, -106.48694063948906, -105.01406899734309, -106.51406899734309, -106.6240398751107, -106.08662640903587, -107.13116976254392, -108.14008257308225, -107.11421045622609, -105.61421045622609, -107.11421045622609, -108.61421045622609, -107.11421045622609, -107.55157716223601, -108.52842347141407, -110.02842347141407, -108.52842347141407, -110.02842347141407, -109.30650963852923, -109.30360846108059, -109.52485444443268, -110.5393013262351, -109.0393013262351, -110.5393013262351, -110.72223904703264, -109.25099048971092, -107.98686058584445, -109.48686058584445, -108.92414395911193, -107.90362103822687, -109.40362103822687, -107.90362103822687, -109.40362103822687, -110.10485868134063, -110.4003285244986, -108.9003285244986, -107.4003285244986, -108.9003285244986, -107.4003285244986, -107.74909775195053, -107.59276871499756, -106.36795796088026, -107.86795796088026, -107.47950814528784, -106.50039682029478, -105.29305281107324, -105.4396875864692, -106.07611473423817, -105.66350906143676, -107.07646063453834, -105.57646063453834, -107.07646063453834, -105.57646063453834, -107.07646063453834, -105.57646063453834, -106.34728864436875, -104.84728864436875, -105.50359879631691, -106.18122919543234, -107.51916321498969, -106.80987904589091, -105.30987904589091, -106.80987904589091, -105.30987904589091, -103.80987904589091, -105.30987904589091, -105.6088056197118, -105.3920408098981, -105.61648618430335, -106.16750089116334, -107.30817409642049, -106.07832337641787, -107.07672963805123, -105.57672963805123, -105.63827547454918, -107.13827547454918, -105.63827547454918, -104.13827547454918, -105.63827547454918, -105.31277323162541, -104.99787113424912, -106.34293761845908, -107.39508323658873, -105.89508323658873, -106.48600848881024, -104.98600848881024, -106.48600848881024, -107.05210026137932, -105.55210026137932, -107.05210026137932, -106.9813913614783, -106.38319498418599, -107.20900110651965, -105.70900110651965, -107.20900110651965, -106.64401007548784, -105.14401007548784, -105.35651794309888, -105.88038997264265, -106.63388488705934, -106.9252169426301, -106.57456589700418, -106.81538777990221, -106.21766650061582, -104.71766650061582, -106.21766650061582, -106.23110342669845, -104.85445751106202, -106.35445751106202, -106.301934367227, -104.801934367227, -106.301934367227, -105.76135845757543, -104.59197547872625, -104.77617301053664, -105.7192284751795, -106.85975811708998, -106.85975811708998, -106.85975811708998, -106.85975811708998, -106.85975811708998, -106.85975811708998, -106.85975811708998, -106.85975811708998, -106.85975811708998, -106.85975811708998, -106.85975811708998, -108.35975811708998, -109.85975811708998, -108.35975811708998, -109.85975811708998, -111.35975811708998, -111.30962947030352, -109.80962947030352, -108.40859028934423, -109.90859028934423, -109.5862344341039, -111.0862344341039, -112.5862344341039, -111.0862344341039, -110.01498545197664, -111.51498545197664, -111.5489800122081, -110.30169471684495, -110.32166089040614, -111.82166089040614, -113.32166089040614, -113.92010254690268, -112.42010254690268, -111.49581669429955, -112.99581669429955, -112.94832128780823, -111.44832128780823, -112.13448951110118, -110.63448951110118, -110.44600203115682, -111.29016887291749, -110.90196429815839, -112.40196429815839, -113.37325507017948, -112.69515255103622, -112.48180919384669, -113.32958499707837, -114.13676167890898, -112.63676167890898, -114.13676167890898, -112.95207063631169, -112.890720480537, -111.59018746939466, -110.7865030852402, -111.50875910869357, -111.9589280786271, -112.72560810921425, -111.22560810921425, -112.72560810921425, -111.22560810921425, -110.37601273263387, -111.50143443277621, -110.00143443277621, -108.54537441703786, -107.04537441703786, -108.54537441703786, -107.04537441703786, -108.54537441703786, -107.61589269402253, -106.14851609727236, -105.12085649921508, -106.62085649921508, -106.60463875328519, -105.14330057574145, -105.66153611131247, -104.91722421836721, -105.94491984808064, -105.4700542892005, -105.47322154248693, -105.24078801950338, -106.74078801950338, -105.24078801950338, -106.74078801950338, -105.24078801950338, -106.74078801950338, -107.6477188697016, -106.1477188697016, -107.6477188697016, -106.1477188697016, -107.6477188697016, -106.23983505437627, -106.23983505437627, -106.23983505437627, -106.23983505437627, -106.23983505437627, -106.23983505437627, -106.23983505437627, -106.23983505437627, -106.23983505437627, -106.23983505437627, -106.23983505437627]
def nihe(f, power, freq_max,x=[0],status='nihe'):
    if(status=='nihe'):
        ff = []
        for i in range(len(f) - 1):
            ff.append(f[i + 1] - f[i])
        ff.append(0)
        y = no_zero(get_ave(ff, 10))
        y = integrate(y)
        z = np.linspace(0, 30, len(y))
    else:
        y=f
    # plt.plot(x,f,color='b')
    if(len(x)==1):
        lx = np.linspace(0, 30, len(y))
    else:
        lx=[]
        for i in range(len(x)):
            lx.append(x[i])
        if(len(x)>len(y)):
            for i in range(len(x)-len(y)):
                lx.pop()
        if (len(x)<len(y)):
            for i in range(len(y)-len(x)):
                lx.append(x[len(x)-1])

    linear_model = np.polyfit(lx, y, power)
    linear_model_fn = np.poly1d(linear_model)
    # plt.plot(lx, y, color="orange")
    # plt.title("demo")
    # plt.xlabel("X")
    # plt.ylabel("Y")
    x_s = lx
    # plt.plot(x_s, linear_model_fn(x_s), color="green")

    plt.show()
    peak_indexes = signal.argrelextrema(linear_model_fn(x_s), np.greater, order=1)
    peak_indexes = peak_indexes[0]

    valley_indexes = signal.argrelextrema(linear_model_fn(x_s), np.less, order=1)
    valley_indexes = valley_indexes[0]

    final_index = test_dense(peak_indexes, valley_indexes, linear_model_fn(x_s), freq_max)

    count = get_count(final_index, linear_model_fn(x_s))

    # if(valley_indexes[0]<=peak_indexes[0] and len(valley_indexes)>len(peak_indexes)):
    #     count=len(peak_indexes)+(valley_indexes[0]+len(linear_model_fn(x_s))-valley_indexes[len(valley_indexes)-1])/((valley_indexes[len(valley_indexes)-1]-valley_indexes[0])/len(peak_indexes))
    # if(valley_indexes[0]>=peak_indexes[0] and len(valley_indexes)<len(peak_indexes)):
    #     count = len(valley_indexes) +(peak_indexes[0] + len(linear_model_fn(x_s)) - peak_indexes[len(peak_indexes) - 1]) / ((peak_indexes[len(peak_indexes) - 1] - peak_indexes[0]) / len(valley_indexes))
    # if(len(valley_indexes)==len(peak_indexes)):
    #     count=len(valley_indexes)-0.5+(len(linear_model_fn(x_s))-max(peak_indexes[len(peak_indexes)-1]-valley_indexes[0],valley_indexes[len(valley_indexes)-1]-peak_indexes[0]))/((max(peak_indexes[len(peak_indexes)-1]-valley_indexes[0],valley_indexes[len(valley_indexes)-1]-peak_indexes[0]))/(len(peak_indexes)-0.5))
    return(int(np.around(count, decimals=0)))
def data_pro(A,x):
    a_list=A
    for i in range(len(A)-1):
        if (a_list[i+1]-a_list[i]>x):
            a_list[i+1]=a_list[i]
        if (a_list[i+1]-a_list[i]<-x):
            a_list[i+1]=a_list[i]
        else:
            continue
    return a_list
def seek_slope(A):
    list=[]
    A.append(A[len(A)-1])
    for i in range(len(A)-1):
        list.append(A[i+1]-A[i])
    return list
def dec_line(A,slope_range):
    slope=seek_slope(A)
    for i in range(len(slope)):
        if (slope[i]>=slope_range):
            A[i+1]=A[i]+slope_range
        if(slope[i]<-slope_range):
            A[i+1]=A[i]-slope_range
        else:
            continue
    A.pop()
    return A
def three_bit(x):
    if(x<10):
        return '00'+str(x)
    if(x>=10 and x<100):
        return '0'+str(x)
    else:
        return str(x)
def move_line(A,slope_range):
    wanted=A
    wanted.append(1)

    line1=seek_slope(dec_line(A,slope_range))

    for i in range(len(line1)):
        if (line1[i]>slope_range):
            line1[i]=slope_range
        if (line1[i]<-slope_range):
            line1[i]=-slope_range
        else:
            continue
    for i in range(len(line1)):
        wanted[i+1]=(wanted[i]+line1[i])
    wanted.pop()
    wanted.pop()
    return wanted
def divide_into_five(list_A,x,amount):


    for i in range (math.floor(len(list_A)/amount)):
        if np.var(list_A[amount*i:amount*i+amount])>x:
            list_w = []
            for ii in range(amount):

                list_w.append(list_A[amount*i-1])
            list_A[amount*i:amount*i+amount]=list_w

        else:
            continue

    return list_A
def get_subcarrier(A,x):
    a_list=A
    wanted=[]
    if(x>=len(A[:][0])):
        print('x is out of range')
    else:
        for i in range(len(A[:])):
            wanted.append(A[:][i][x])
    return wanted
def total(power1,power2,freq1,freq2,range_):

    for sdir in range(range_):
        try:

            print('this is '+str(sdir)+' data')
            dir_ = './wave2process/tdx_wave_0726/wave_csv_'+three_bit(sdir)+'/'
            df = pd.read_csv(dir_ + 'wave.csv', index_col=0)

            # plt.figure()
            # fig, ax = plt.subplots()
            # lns1 = ax.plot(df['seconds'], df['wave'], label = 'wave')
            # plt.show()
            # plt.plot(df['seconds'],df['wave'],color='purple')
            # plt.show()
            # mmm=np.linspace(0,30,len(df['wave']))
            count1=nihe(df['wave'],power1,freq1,df['seconds'],status='no')

            content='This is real BPM:\n'+str(count1)
            filename=dir_+'compared_p1_'+str(power1)+'_p2_'+str(power2)+'_q1_'+str(freq1)+'_q2_'+str(freq2)+'.txt'
            with open(filename,'w') as f:
                for line in content.splitlines():
                    f.write(line+'\n')
            # plt.show()
            # ax2 = ax.twinx()
            # lns2 = ax2.plot(df['seconds'], df['bre_freq'], label = 'bre_freq', color='green')
            # ax.legend(lns1+lns2, [l.get_label() for l in lns1+lns2], bbox_to_anchor=(.95, .9))
            # # ax.set_xlabel('Time (s)')
            # ax.set_ylabel('breath wave', color='indigo')
            # ax.tick_params(axis='y', labelcolor='indigo')
            # y_major_ax2 = MultipleLocator(1)
            # ax2.yaxis.set_major_locator(y_major_ax2)# ax=plt.gca()
            # ax2.set_ylabel('breath (times / minute)', color='green')
            # ax2.tick_params(axis='y', labelcolor='green')
            # fig.show()


            import numpy as np
            datas = np.load(dir_+'rx.npz')
            # datas = np.load('./wave2process/tdx_wave_0725/wave_csv_032/rx_4_230725_151423.npz')

            Timestamp = datas['Timestamp']
            SubcarrierIndex = datas['SubcarrierIndex']
            Csi = datas['Csi']
            RSSI = datas['RSSI']
            noiseFloor = datas['noiseFloor']
            Num_Tx = int(datas['Num_Tx'])
            Num_Rx = int(datas['Num_Rx'])
            centerFrequency = int(datas['centerFrequency'])
            channelBandWidth = int(datas['channelBandWidth'])
            Mag = np.abs(Csi)
            Phase = np.angle(Csi, deg=True)
            Num_Ts = Timestamp.size
            Num_Sc = SubcarrierIndex.size
            Seconds = Timestamp - Timestamp[0]

            import matplotlib as mpl
            import math
            from cycler import cycler
            mpl.rcParams['axes.prop_cycle'] = cycler(color=['#7E2F8E','#77AC30','#0072BD','#EDB120','#d62728','#17becf','#7f7f7f'])# #8c564b #e377c2 #bcbd22
            # y_major_locator_Mag = MultipleLocator(50)
            # y_major_locator_Pha = MultipleLocator(60)
            # y_major_locator_RSSI = MultipleLocator(1)
            # Num_plotTs = 3
            # Ylim_max_mag = math.ceil( Mag[Num_Ts-Num_plotTs:Num_Ts].max() /100 )*100
            # Ylim_max_pha = math.ceil( Phase[Num_Ts-Num_plotTs:Num_Ts].max() /10 )*10
            # plt.figure()
            # fig, axs = plt.subplots(2, Num_Tx*Num_Rx, sharex='col', sharey='row', figsize=(14,6))#figsize=(14,7)
            # axs[0][0].yaxis.set_major_locator(y_major_locator_Mag)# ax=plt.gca()
            # axs[1][0].yaxis.set_major_locator(y_major_locator_Pha)# ax=plt.gca()
            # axs[0][0].set_ylim([0,Ylim_max_mag])
            # axs[1][0].set_ylim([-Ylim_max_pha,Ylim_max_pha])

            # for ts in range(Num_Ts-Num_plotTs, Num_Ts  ): #      -Num_plotTs+1
            #     for txid in range(Num_Tx):
            #         for rxid in range(Num_Rx):
            #             axs[0][txid*Num_Rx + rxid].scatter(SubcarrierIndex, Mag[ts][txid][rxid][:], s=.5)
            #             axs[0][txid*Num_Rx + rxid].set_title('Tx'+str(txid+1)+' -> Rx'+str(rxid+1))
            #             axs[1][txid*Num_Rx + rxid].scatter(SubcarrierIndex, Phase[ts][txid][rxid][:], s=.5)
            #             axs[1][txid*Num_Rx + rxid].set_xlabel('Subcarrier Index')
            #         axs[0][txid * Num_Rx].set_ylabel('Magitude (abs)')
            #         axs[1][txid * Num_Rx].set_ylabel('Phase (°)')
            # fig.legend(labels=[i for i in range(1,1+Num_plotTs)], loc="right", title = 'timepoint')
            # fig.subplots_adjust(wspace=0.13,hspace=0.2,right=0.925) # left=0.1,bottom=0.1,right=0.9,top=0.9,
            # fig.show()


            sc_plot = [-28, -27]
            sc_plot[1] += 1
            scid_plot = [i+SubcarrierIndex[-1] for i in sc_plot]
            # plt.figure()
            # fig, axs = plt.subplots(Num_Tx*2, Num_Rx, sharex='col', sharey='row', figsize=(14,6))#figsize=(14,7)
            # for sc in range(scid_plot[0], scid_plot[1]): #      -Num_plotTs+1
            #     for rxid in range(Num_Rx):
            #         for txid in range(Num_Tx):
            #             # axs[txid*2,rxid].plot(Seconds, Mag[:,txid,rxid,sc])
            #             # axs[txid*2+1,rxid].plot(Seconds, Phase[:,txid,rxid,sc])
            #             axs[txid*2,rxid].set_title('Tx'+str(txid+1)+' -> Rx'+str(rxid+1))
            #             axs[txid*2,rxid].set_ylabel('Magitude (abs)')
            #             axs[txid*2+1,rxid].set_ylabel('Phase (°)')
            #         axs[Num_Tx*2-1,rxid].set_xlabel('Time (s)')
            #         axs[Num_Tx*2-1,rxid].set_xlim([min(Seconds),(max(Seconds))])

            # fig.legend(labels=[i for i in range(sc_plot[0],sc_plot[1])], loc="right", title='Subcarrier')
            # fig.subplots_adjust(wspace=0.1,hspace=0.3,right=0.925) # left=0.1,bottom=0.1,right=0.9,top=0.9,
            # fig.show()


            sc_plot = [-28, -27]
            sc_plot[1] += 1
            scid_plot = [i+SubcarrierIndex[-1] for i in sc_plot]
            # plt.figure()
            # fig, axs = plt.subplots(Num_Tx*Num_Rx, 1, sharex='col', sharey='row', figsize=(14,6))#figsize=(14,7)
            # for sc in range(scid_plot[0], scid_plot[1]): #      -Num_plotTs+1
            #     for txid in range(Num_Tx):
            #         for rxid in range(Num_Rx):
            #             axs[txid*Num_Rx+rxid].plot(Seconds, Mag[:,txid,rxid,sc])
            #             axs[txid*Num_Rx+rxid].set_title('Tx'+str(txid+1)+' -> Rx'+str(rxid+1))
            #             axs[txid*Num_Rx+rxid].set_ylabel('Magitude (abs)')
            #             axs[txid*Num_Rx+Num_Rx-1].set_xlabel('Time (s)')
            #             axs[txid*Num_Rx+Num_Rx-1].set_xlim([min(Seconds),(max(Seconds))])
            # fig.legend(labels=[i for i in range(sc_plot[0],sc_plot[1])], loc="right", title = 'Subcarrier')
            # fig.subplots_adjust(wspace=0.1,hspace=0.2,right=0.925) # left=0.1,bottom=0.1,right=0.9,top=0.9,
            # fig.show()

            # plt.figure()
            # fig, axs = plt.subplots(Num_Tx*Num_Rx, 1, sharex='col', sharey='col', figsize=(14,6))#figsize=(14,7)
            # for sc in range(scid_plot[0], scid_plot[1]): #      -Num_plotTs+1
            #     for txid in range(Num_Tx):
            #         for rxid in range(Num_Rx):
                        # axs[txid*Num_Rx+rxid].plot(Seconds, Phase[:,txid,rxid,sc])
                        # axs[txid*Num_Rx+rxid].set_title('Tx'+str(txid+1)+' -> Rx'+str(rxid+1))
                        # axs[txid*Num_Rx+rxid].set_ylabel('Phase (°)')
                        # axs[txid*Num_Rx+Num_Rx-1].set_xlabel('Time (s)')
                        # axs[txid*Num_Rx+Num_Rx-1].set_xlim([min(Seconds),(max(Seconds))])
                        # axs[txid*Num_Rx+Num_Rx-1].yaxis.set_major_locator(y_major_locator_Pha)# ax=plt.gca()
                        # axs[txid*Num_Rx+Num_Rx-1].set_ylim([-180, 180])
            # fig.legend(labels=[i for i in range(sc_plot[0],sc_plot[1])], loc="right", title = 'Subcarrier')
            # fig.subplots_adjust(wspace=0.1,hspace=0.2,right=0.925) # left=0.1,bottom=0.1,right=0.9,top=0.9,
            # fig.show()

            diff_Phase = np.zeros([Num_Ts, Num_Tx, Num_Sc])
            for txid in range(Num_Tx):
                diff_Phase[:,txid,:] = Phase[:,txid,1,:] - Phase[:,txid,0,:]
                diff_Phase_ori = diff_Phase.copy()
                for scid in range(Num_Sc):
                    temp = diff_Phase[:,txid, scid].copy()
                    while np.mean(temp)-np.min(temp)>180:
                        n_t_360 = np.where(temp<np.mean(temp)-180)[0]
                        diff_Phase[n_t_360,txid, scid] += 360
                        temp = diff_Phase[:, txid, scid].copy()
                    while np.max(temp)-np.mean(temp)>180:
                        n_t_360 = np.where(temp>np.mean(temp)+180)[0]
                        diff_Phase[n_t_360,txid, scid] -= 360
                        temp = diff_Phase[:,txid, scid].copy()
                    ratio_lowlier = np.sum(temp<-180)/temp.size
                    ratio_uplier = np.sum(temp>180)/temp.size
                    if ratio_lowlier > 0.5:
                        diff_Phase[:,txid, scid] += 360
                    if ratio_uplier > 0.5:
                        diff_Phase[:,txid, scid] -= 360

                # plt.figure()
                # fig, axs = plt.subplots(3, 1, sharex='col', figsize=(14,6))#figsize=(14,7)
                # axs[0].plot(Seconds, diff_Phase_ori[:,txid, 0:1])
                # axs[0].set_ylabel('diff_Phase_ori (°)')
                # axs[0].yaxis.set_major_locator(y_major_locator_Pha)# ax=plt.gca()
                # axs[0].set_title('Tx'+str(txid+1)+': Phase(Rx2) - Phase(Rx1)'+'\nBefore +- 360°')
                # axs[1].plot(Seconds, diff_Phase[:,txid, 0:1])
                # axs[1].set_ylabel('diff_Phase (°)')
                # axs[1].yaxis.set_major_locator(y_major_locator_Pha)# ax=plt.gca()
                # axs[1].set_title('After +- 360°')
                for i in range(1):
                    y=get_subcarrier(diff_Phase[:,txid,:],i)
                # for i in range(1531):
                #     diff_Phase[:,txid,:][i]=data_pro(diff_Phase[:,txid,:][i],20)
                    xi= move_line(divide_into_five(y,10,10),1.5)
                    # axs[2].plot(Seconds,xi)

                    count2=nihe(xi,power2,freq2,x=[0],status='nihe')

                    error=abs(count2/count1-1)
                    con = 'this is CSI:\n'+str(count2)+'\nthis is error:\n'+str(error)
                    with open(filename, 'a') as f:
                        for line in con.splitlines():
                            f.write(line + '\n')




                # axs[2].plot(data_pro(diff_Phase[:,txid,:][0],700))

                # axs[2].set_ylabel('diff_Phase (°)')
                # axs[2].yaxis.set_major_locator(y_major_locator_Pha)# ax=plt.gca()
                # axs[2].set_title('All Subcarrier')
                # axs[2].set_xlabel('Time (s)')
                # axs[2].set_xlim([min(Seconds),(max(Seconds))])
                # fig.subplots_adjust(hspace=0.4) # left=0.1,bottom=0.1,right=0.9,top=0.9,
                # fig.show()


            # num_sc_plot_ax = 5
            # row_num, col_cum = 4, 3
            # for txid in range(Num_Tx):
            #     plt.figure()
                # fig, axs = plt.subplots(row_num, col_cum, sharex='col', sharey='row', figsize=(21,10))#figsize=(14,7)
                # for row in range(row_num):
                #     for col in range(col_cum):
                #         sc_range = [num_sc_plot_ax * (row_num*col+row), num_sc_plot_ax * (row_num*col+row+1)]
                #         sc_range[1] = Num_Sc if sc_range[1] > Num_Sc else sc_range[1]
                #         # axs[row, col].plot(Seconds, diff_Phase[:,txid, sc_range[0]:sc_range[1]])
                #         # axs[row, col].set_title(str(sc_range[0]) + ':' + str(sc_range[1]))
                #         if row == 0:
                #             axs[row, col].set_title('Subcarrier Index ' + str(sc_range[0]) + ':' + str(sc_range[1]))
                #             if col == 1:
                #                 axs[0,1].set_title('Tx'+str(txid+1)+': Phase(Rx2) - Phase(Rx1)' + '\n' + 'Subcarrier Index ' + str(sc_range[0]) + ':' + str(sc_range[1]))
                #         axs[col_cum, col].set_xlabel('Time (s)')
                #     axs[row,0].set_ylabel('diff_Phase (°)')
                #     axs[row,0].yaxis.set_major_locator(y_major_locator_Pha)# ax=plt.gca()
                # fig.legend(labels=range(num_sc_plot_ax), loc="right", title = 'Subcarrier\n     order')
                # fig.subplots_adjust(wspace=0.1,hspace=0.2,right=0.945) # left=0.1,bottom=0.1,right=0.9,top=0.9,
                # fig.show()
        except:
            print('gan')
            pass
            continue
# for pp in range(80,140,5):
for pp2 in range(30,40,5):
        # for fff1 in range(60,160,10):
    for fff2 in range(170,180,10):
        total(150,pp2,100,fff2,140)


